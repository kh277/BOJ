# 백준 1309

'''
생각1

가로줄에는 칸 수, 세로줄에는 배치할 사자 수를 저장한다.
        1칸     2칸     3칸     4칸     ...
0마리
1마리
2마리
3마리

예를 들어 3마리에 4칸이면 2*4의 배열에 사자 3마리가 들어가는 경우의 수이다.

점화식 : DP[i][j] (2*j칸에 i마리의 사자가 들어가는 경우의 수)
    = DP[i-1][j-2] + DP[i-1][j-1] + DP[i][j-1]


생각2
생각1과 같이 풀었더니 메모리 초과가 발생했다.
DP 테이블의 크기를 줄이거나 점화식을 최적화해야 한다.
DP[0][k]~DP[N][k]까지의 값의 총합을 계산해봤더니,
DP[0][k-1]+ (DP[0][k-2]+DP[0][k-1]+DP[1][k-1]) + (DP[1][k-2]+DP[1][k-1]DP[2][k-1]) + ...
과 같이 DP[0][k-1]~DP[N][k-1] * 2 + DP[0][k-2][N][k-2]가 되었다.

점화식 : DP[i] (2*i칸에 사자가 들어가는 경우의 수)
    = 2*DP[i-1] + DP[i-2]
'''

import sys

input = sys.stdin.readline


def solve(N: int) -> int:
    # DP 배열에서 세로줄은 0마리~N마리까지, 가로줄은 1칸~N칸까지 사용
    DP = [0 for _ in range(N+1)]

    # 초기값 설정
    DP[0] = 1
    DP[1] = 3
    
    # 이후 데이터들에 대해 반복
    for i in range(2, N+1):
        DP[i] = (2*DP[i-1] + DP[i-2]) % 9901
        
    return DP[N]


def main():
    N = int(input())
    print(solve(N))


main()